<?php

/**
 * Implements field hook_field_info().
 * JR - Add the sum array that will be used for the sum widget
 */
function entityform_calculator_field_info() {
  return array(
    'computed' => array(
      'label' => t('Calculated'),
      'description' => t('Create field data via PHP code.'),
      'settings' => array(
        'code' => '$entity_field[0][\'value\'] = "";',
        'display_format' => '$display_output = $entity_field_item[\'value\'];',
        'store' => 1,
        'database' => array(
          'data_type' => 'varchar',
          'data_length' => 32,
          'data_size' => 'normal',
          'data_precision' => 10,
          'data_scale' => 2,
          'data_not_NULL' => FALSE,
          'data_default' => NULL,
          'data_index' => FALSE,
        ),
      ),
    //JR  'default_widget' => 'computed',
    //JR  'default_formatter' => 'entityform_calculator_plain',
      // If we followed the core convention of separate fields for each data
      // type we could make Entity API happy by just setting a property_type.
      // Instead we have to use our own callback to determine the type then
      // rerun theirs to setup the rest of the field properties.
      'property_callbacks' => array('entityform_calculator_entity_property_callback'),
    ),
    'sum' => array(
      'label' => t('Sum'),
      'description' => t('Calculate the sum of two entity fields real time'),
      'default_widget' => 'sum',
      'default_formatter' => 'sum',
    )
  );
}

/**
 * Callback to setup Entity API's field properties.
 */
function entityform_calculator_entity_property_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property_types = array(
    'int' => 'integer',
    'float' => 'decimal', 'numeric' => 'decimal',
    'varchar' => 'text', 'text' => 'text', 'longtext' => 'text',
  );
  if (isset($field['columns']['value']) && isset($property_types[$field['columns']['value']['type']])) {
    // Entity API's defaults are pretty good so set the property_type and let
    // them do the work for us.
    $field_type['property_type'] = $property_types[$field['columns']['value']['type']];
    entity_metadata_field_default_property_callback($info, $entity_type, $field, $instance, $field_type);
    // The only thing is that a setter doesn't make sense, so let's disable it.
    $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
    unset($property['setter callback']);
  }
}

/**
 * Implements of hook_field_settings_form().
 * JR - Required to make the settings for the field
 */
function entityform_calculator_field_settings_form($field, $instance, $has_data, $form = NULL, &$form_state = NULL) {
  $form = array();
  $compute_func = 'entityform_calculator_' . $field['field_name'] . '_compute';
  $display_func = 'entityform_calculator_' . $field['field_name'] . '_display';
  $settings = $field['settings'];

  // JR collect available entity fields that are integers
  $calculated_fields_options = array();
  $calculated_fields_values = array();
  $entities_options = array();
  $calculated_fields_entity_type_info = array();
  foreach (field_info_fields() as $field) {
   // if ($field['type'] == 'computed' && $field['module'] == 'computed_field') {
   // JR ignore requirement that the module be computed_field. 
		// print $field['type']; 
     if ($field['type'] == 'text') {  
      // Collect fields of type computed_field.
      $calculated_fields_options[$field['field_name']] = $field['field_name'];
      // assign the field values
      $calculated_fields_values[$field['id']] = $field['id'];
      foreach ($field['bundles'] as $entity_type => $bundle) {
        foreach ($bundle as $subtype) {
          // Collect additional information to help get an overview of which fields are used on which entity types.
          $calculated_fields_entity_type_info[$field['field_name']][] = t('%subtype (%entity_type)', array('%subtype' => $subtype, '%entity_type' => $entity_type));

          // Collect entity types which has computed fields.
          $entities_options[$entity_type][$subtype] = $subtype;
        }
      }
    }
  }

  // Check if we have any computed fields to re-compute.
  if (empty($calculated_fields_options)) {
    $form['info_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Nothing to re-compute'),
    );
    $form['info_fieldset']['info'] = array(
      '#markup' => t('The computed field has not been attached to any entity types, so there is nothing to re-compute.'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );

    return $form;
  }


  // Collect additional information to help get an overview of which fields are used on which entity types.
  $field_info_description = '';
  foreach ($calculated_fields_entity_type_info as $field_name => $bundles) {
    $field_info_description .= empty($field_info_description) ? '' : '<br />';
    $field_info_description .= $field_name . ': ' . implode(', ', $bundles);
  }

  $form['fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Entityform Calculator Computed fields'),
  );
  
  // The first field to be calculated  field_1
  $form['fields']['computed_field_to_recompute'] = array(
    '#type' => 'select',
    '#title' => t('Select the base field (calculate_field_1)'),
    '#required' => TRUE,
    '#options' => $calculated_fields_options,
  //'#default_value' => current($calculated_fields_options),
  //'#default_value' => current($calculated_fields_values),
    '#default_value' => !empty($settings['fields']['computed_field_to_recompute']) ? $settings['fields']['computed_field_to_recompute'] : current($calculated_fields_values),
    '#description' => t('Computed fields and the entities they are used on:<br />!field_info_description', array('!field_info_description' => $field_info_description)),
    '#description' => t('This is the first field to be calculated, field_1'),
  );


  // The second field to be calculated  field_2
  $form['fields']['calculate_field_2'] = array(
    '#type' => 'select',
    '#title' => t('Select the next field (calculate_field_2)'),
    '#required' => TRUE,
    '#options' => $calculated_fields_options,
    '#description' => t('This is the second field to be calculated, field_2'),
    '#default_value' => !empty($settings['fields']['calculate_field_2']) ? $settings['fields']['calculate_field_2'] : current($calculated_fields_values),
  );

  
/*$form['fields']['computed_field_to_ids'] = array(
    '#type' => 'select',
    '#title' => t('Select the field id'),
    '#required' => FALSE,
    '#options' => $calculated_fields_values,
    '#default_value' => current($calculated_fields_values),
    '#description' => t('These are the field IDs. This field pulls all of the field IDs of the available fields.'),
  );*/


  // JR's trickery ENd 
  

  $form['#element_validate'] = array('entityform_calculator_field_settings_form_validate');
  if(!isset($settings['store'])) {
    $settings['store'] = 1;
  }
  $form['store'] = array(
    '#type' => 'checkbox',
    '#title' => t('How do you want to store your numeric values in the database'),
    '#description' => t('The value will be stored in the database with the settings below.  As a result, it will only be recalculated when the entity is updated.  This option is required when accessing the field through Views.Once saved, these values cannot be changed'),
    '#default_value' => is_numeric($settings['store']) ? $settings['store'] : 1 ,
    '#disabled' => $has_data,
  );
  $form['database'] = array('#type' => 'fieldset', '#title' => t('Database Storage Settings'));

  if ($has_data) {
  $form['database']['warning'] = array(
      '#type' => 'item',
      '#markup' => t('<strong>**This field currently has stored data, so modifications to its DB settings are not allowed.**</strong>'),
    );
  }
  $form['database']['data_type'] = array(
    '#type' => 'radios',
    '#title' => t('Data Type'),
    '#description' => t('The SQL datatype to store this field in.'),
    '#default_value' => !empty($settings['database']['data_type']) ? $settings['database']['data_type'] : 'varchar',
    '#options' => array('varchar' => 'varchar', 'text' => 'text', 'longtext' => 'longtext', 'int' => 'int', 'float' => 'float', 'numeric' => 'decimal'),
    '#required' => FALSE,
    '#disabled' => $has_data,
  );
  $form['database']['data_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Data Length (varchar/text)'),
    '#description' => t('<strong>Only</strong> valid for <strong>varchar</strong> or <strong>text</strong> fields. The length of the field stored in the database.'),
    '#default_value' => !empty($settings['database']['data_length']) ? $settings['database']['data_length'] : 32,
    '#required' => FALSE,
    '#disabled' => $has_data,
  );
  $form['database']['data_size'] = array(
    '#type' => 'select',
    '#title' => t('Data Size (int/float)'),
    '#description' => t('<strong>Only</strong> valid for <strong>int</strong> or <strong>float</strong> fields. The size of the field stored in the database.'),
    '#default_value' => !empty($settings['database']['data_size']) ? $settings['database']['data_size'] : 'normal',
    '#options' => array('tiny' => 'tiny', 'small' => 'small', 'medium' => 'medium', 'normal' => 'normal', 'big' => 'big'),
    '#required' => FALSE,
    '#disabled' => $has_data,
  );
  $form['database']['data_precision'] = array(
    '#type' => 'select',
    '#title' => t('Decimal Precision (decimal)'),
    '#description' => t('<strong>Only</strong> valid for <strong>decimal</strong> fields. The total number of digits to store in the database, including those to the right of the decimal.'),
    '#options' => drupal_map_assoc(range(10, 32)),
    '#default_value' => !empty($settings['database']['data_precision']) ? $settings['database']['data_precision'] : 10,
    '#required' => FALSE,
    '#disabled' => $has_data,
  );
  $form['database']['data_scale'] = array(
    '#type' => 'select',
    '#title' => t('Decimal Scale (decimal)'),
    '#description' => t('<strong>Only</strong> valid for <strong>decimal</strong> fields. The number of digits to the right of the decimal. '),
    '#options' => drupal_map_assoc(range(0, 10)),
    '#default_value' => !empty($settings['database']['data_scale']) ? $settings['database']['data_scale'] : 2,
    '#required' => FALSE,
    '#disabled' => $has_data,
  );
  if(!(isset($settings['database']['data_default']))) { 
    $settings['database']['data_default'] = 0; 
  }
  if(!(isset($settings['database']['data_not_NULL']))) { 
    $settings['database']['data_not_NULL'] = ''; 
  }
  if(!(isset($settings['database']['data_index']))) {
    $settings['database']['data_index'] = '';
  }
  $form['database']['data_default'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Value'),
    '#default_value' => $settings['database']['data_default'],
    '#required' => FALSE,
    '#disabled' => $has_data,
  );
  $form['database']['data_not_NULL'] = array(
    '#type' => 'checkbox',
    '#title' => t('Not NULL'),
    '#default_value' => is_numeric($settings['database']['data_not_NULL']) ? $settings['database']['data_not_NULL'] : FALSE,
    '#disabled' => $has_data,
  );
  $form['database']['data_index'] = array(
    '#type' => 'checkbox',
    '#title' => t('Index computed values in the database (Does not apply to text or longtext fields.)'),
    '#default_value' => is_numeric($settings['database']['data_index']) ? $settings['database']['data_index'] : FALSE,
    '#disabled' => $has_data,
  );
  return $form;
}


/**
* Implements the #element_validate callback for entityform_calculator_field_settings_form().
*/
function entityform_calculator_field_settings_form_validate($element, &$form_state) {
  $settings = $form_state['values']['field']['settings'];
  if ($settings['store']) {
    if (empty($settings['database']['data_type'])) {
      form_set_error('field][settings][data_type', t('To store this field in the database, please specify a data type.'));
    }
    if (($settings['database']['data_type'] == 'text' || $settings['database']['data_type'] == 'varchar') && empty($settings['database']['data_length'])) {
      form_set_error('field][settings][database][data_length', t('To store this field in the database, please specify the data length.'));
    }
    if (($settings['database']['data_type'] == 'int' || $settings['database']['data_type'] == 'float') && (!empty($settings['database']['data_default']) && !is_numeric($settings['database']['data_default']))) {
      form_set_error('field][settings][database][data_default', t('Your default value should be numeric given your data type.'));
    }
  }
}

/**
 * Implements field hook_field_load().
 */
function entityform_calculator_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  $settings = $field['settings'];
  // Compute field values on load if they aren't stored in the database
  if (!$settings['store']) {
    foreach ($entities as $etid => $entity) {
      _entityform_calculator_compute_value($entity_type, $entity, $field, $instances, $langcode, $items[$etid]);
    }
  }
}

/**
 * Implements field hook_field_prepare_view().
 */
function entityform_calculator_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  // Compute field values in case user is "previewing" an entity
  foreach ($entities as $etid => $entity) {
    if (isset($entity->op) && $entity->op == 'Preview') {
      _entityform_calculator_compute_value($entity_type, $entity, $field, $instances, $langcode, $items[$etid]);
    }
  }
}

/**
 * Implements field hook_field_insert().
 */
function entityform_calculator_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  _entityform_calculator_compute_value($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements field hook_field_update().
 */
function entityform_calculator_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  _entityform_calculator_compute_value($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements field hook_field_widget_info().
 * JR - added new widget option: sum
 */
function entityform_calculator_field_widget_info() {
  return array(
    'computed' => array(
      'label' => t('Computed'),
      'field types' => array('computed'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),    
    'sum' => array(
      'label' => t('Sum'),
      'field types' => array('sum'),
    ),  
  );
}

/**
 * Implements field hook_field_widget_form().
 * JR - Added form for widget value 'sum'. Added switch. 
 */

function entityform_calculator_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  switch ($instance['widget']['type']) {
    
    case 'sum':
      // JR Array here to collect field values. 
      if((isset($field['settings']['fields']['computed_field_to_recompute'])) && (isset($field['settings']['fields']['calculate_field_2']))) {
	   // SR - Adding entity form js - drupal_add_js
	   drupal_add_js(drupal_get_path('module', 'entityform_calculator') .'/js/entityform_calculator.js', array('weight' => 100));

      }
      // SR - Taking the default value from here
      $SumField = $SumFieldVlaue = 0;
      if(isset($element['#entity']->$element['#field_name'])) {
        $SumField = $element['#entity']->$element['#field_name'];
        $SumFieldVlaue = $SumField[LANGUAGE_NONE][0]['value']; 
      }
      
      // Below should render result of js
      $element['value']= array(
        '#type' => 'textfield',
		'#title' => $element['#title'],
        // JR - show the sum of the values of the integer fields here:
 //       '#default_value' => $form_state['fields']['computed_field_to_recompute'],
	// SR - show the sum of the values of the integer fields here:
        '#default_value' => $SumFieldVlaue,
	    '#attributes' => array('readonly'=>'readonly'),
      );
      break;

    case 'computed':
      // If there are no items yet, add a null item value to avoid
      // preview errors when selecting a different language
       if (empty($items)) $items[0]['value'] = NULL;

       foreach ($items as $item_delta => $item) {
       $element[$item_delta]['value'] = array(
      '#type' => 'value',
      '#tree' => TRUE,
      '#default_value' => isset($item['value']) ? $item['value'] : NULL,
    );
  }
      break;
}

  return $element;
}
/**
 * Implements field hook_form_alter().
 * SR - Added form field classes. 
 */
function entityform_calculator_form_alter(&$form, &$form_state, $form_id) {
  //SR - Checks for the sum field entry
  if(isset($form_state['field'])) {
    if(count($form_state['field'])) {
      foreach($form_state['field'] as $key => $val) {
        if((isset($val[LANGUAGE_NONE]['field']['settings']['fields']['computed_field_to_recompute'])) && (isset($val[LANGUAGE_NONE]['field']['settings']['fields']['calculate_field_2']))) {
	      $field1   = $val[LANGUAGE_NONE]['field']['settings']['fields']['computed_field_to_recompute'];
	      $field2   = $val[LANGUAGE_NONE]['field']['settings']['fields']['calculate_field_2'];
	      $sumfield = $val[LANGUAGE_NONE]['field']['field_name'];
	      //SR - Appending class to fields
	      $form[$field1]['#attributes']['class'][]   = 'summable'; 
	      $form[$field2]['#attributes']['class'][]   = 'summable'; 
	      $form[$sumfield]['#attributes']['class'][] = 'totalsum'; 
		  array_unshift($form['#submit'], "_entity_form_calculator_submit");
		  if(isset($form['actions']['submit']['#submit'])){
		    array_unshift($form['actions']['submit']['#submit'], "_entity_form_calculator_submit");
		  }
		  if(isset($form['actions']['save']['#submit'])){
		    array_unshift($form['actions']['save']['#submit'], "_entity_form_calculator_submit");	  
		  }
        }
      }
    }
  }
  
}

/**
 * Entity form submit function
 */
function _entity_form_calculator_submit($form, &$form_state) {
  if(isset($form_state['field'])) {
    if(count($form_state['field'])) {
      foreach($form_state['field'] as $key => $val) {
        if((isset($val[LANGUAGE_NONE]['field']['settings']['fields']['computed_field_to_recompute'])) && (isset($val[LANGUAGE_NONE]['field']['settings']['fields']['calculate_field_2']))) {
	      $field1   = $val[LANGUAGE_NONE]['field']['settings']['fields']['computed_field_to_recompute'];
	      $field2   = $val[LANGUAGE_NONE]['field']['settings']['fields']['calculate_field_2'];
	      $sumfield = $val[LANGUAGE_NONE]['field']['field_name'];
	      //SR - Adding the two fields to the sum field
	      if(isset($form_state['values'][$field1][LANGUAGE_NONE][0]['value']) && isset($form_state['values'][$field2][LANGUAGE_NONE][0]['value'])) {
		    $form_state['values'][$sumfield][LANGUAGE_NONE][0]['value'] = $form_state['values'][$field1][LANGUAGE_NONE][0]['value']+$form_state['values'][$field2][LANGUAGE_NONE][0]['value'];
		  }
        }
      }
	}
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function entityform_calculator_field_formatter_info() {
  return array(
      // add format here to show the sum array
    'entityform_calculator_unsanitized' => array(
      'label' => t('Unsanitized'),
      'field types' => array('computed'),
    ),
    'entityform_calculator_plain' => array(
      'label' => t('Plain text'),
      'field types' => array('computed'),
    ),
    'entityform_calculator_markup' => array(
      'label' => t('Filtered markup'),
      'field types' => array('computed'),
    ),
    'entityform_calculator_computed_value' => array(
      'label' => t('Raw value, no display code'),
      'field types' => array('computed'),
    ),
    'sum' => array(
      'label' => t('Entity Fields Sum'),
      'field types' => array('sum'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 * JR - Changed to Switch. 
 */
function entityform_calculator_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Special case formatter that returns the raw computed values without any display code processing
  if ($display['type'] == "entityform_calculator_computed_value") {
    foreach ($items as $delta => $item) {
      if (!isset($entity_field_item['value'])) $entity_field_item['value'] = NULL;
      $element[$delta] = array('#markup' => $item['value']);
    }
    return $element;
  }
  
    if ($display['type'] == "sum") {
    foreach ($items as $delta => $item) {
      if (!isset($entity_field_item['value'])) $entity_field_item['value'] = NULL;
      $element[$delta] = array('#markup' => $item['value']);
    }
    return $element;
  }

  // Other display formatters which run through display code processing
  // Check if the value is to be formatted by a display function outside the DB
  $display_func = 'entityform_calculator_' . $field['field_name'] . '_display';
  if (function_exists($display_func)) $display_in_code = TRUE;
  else $display_in_code = FALSE;

  // Loop the items to display
  foreach ($items as $delta => $item) {

    // For "some" backwards compatibility
    $entity_field_item = $item;

    // Setup a variable with the entity language if available
    if (isset($entity->language)) $entity_lang = $entity->language;
    else $entity_lang = LANGUAGE_NONE;

    // If there are value "holes" in the field array let's set the value to NULL
    // to avoid undefined index errors in typical PHP display code
    if (!isset($entity_field_item['value'])) $entity_field_item['value'] = NULL;

    // Execute the display code
    $display_output = NULL;
    if ($display_in_code) {
      $display_output = $display_func($field, $entity_field_item, $entity_lang, $langcode, $entity);
    }
    else {
      eval($field['settings']['display_format']);
    }

    // Output the formatted display item
    switch ($display['type']) {
      // JR - added case here to show the sum
      case 'sum':
          $element[$delta] = array('#markup' => $display_output);
        break;
      case 'entityform_calculator_unsanitized':
          $element[$delta] = array('#markup' => $display_output);
        break;
      case 'entityform_calculator_plain':
          $element[$delta] = array('#markup' => check_plain($display_output));
        break;
      case 'entityform_calculator_markup':
          $element[$delta] = array('#markup' => check_markup($display_output));
        break;
    }
  }
  return $element;
}

/**
 * Implements field hook_field_is_empty().
 */
function entityform_calculator_field_is_empty($item, $field) {
  if ($field['type'] == 'sum') {
    if (empty($item['value']) && $item['value'] !== '0') {
		return TRUE;
	}
		return FALSE;
	}
  
}

/**
 * Private function to compute the fields value.
 */
function _entityform_calculator_compute_value($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $settings = $field['settings'];

  // Setup a variable with the field values
  $entity_field =& $items;

  // Setup a variable with the entity language if available
  if (isset($entity->language)) $entity_lang = $entity->language;
  else $entity_lang = LANGUAGE_NONE;

  // Allow the value to be computed from code not stored in DB
  $compute_func = 'entityform_calculator_' . $field['field_name'] . '_compute';
  if (function_exists($compute_func)) {
    $compute_func($entity_field, $entity_type, $entity, $field, $instance, $langcode, $items);
  }
  else {
    if (isset($settings['code'])) {
      eval($settings['code']);
    }
  }
}

